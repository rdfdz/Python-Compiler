 < VAR , var > 
 < CHARS , chars > 
 < ID , s > 
 < VAR , var > 
 < INT , int > 
 < ID , num > 
 < VAR , var > 
 < INT , int > 
 < ID , a > 
 < FUNCTION , function > 
 < INT , int > 
 < ID , FactorialRecursivo > 
 < LPAREN , ( > 
 < INT , int > 
 < ID , n > 
 < RPAREN , ) > 
 < LBLOCK , { > 
 < IF , if > 
 < LPAREN , ( > 
 < ID , n > 
 < EQUALS , == > 
 < NUMBER , 0 > 
 < RPAREN , ) > 
 < WRITE , write > 
 < LPAREN , ( > 
 < STRINGS , "Error" > 
 < RPAREN , ) > 
 < RETURN , return > 
 < NUMBER , 2 > 
 < RBLOCK , } > 
 < FUNCTION , function > 
 < INT , int > 
 < ID , FactorialDo > 
 < LPAREN , ( > 
 < INT , int > 
 < ID , n > 
 < RPAREN , ) > 
 < LBLOCK , { > 
 < VAR , var > 
 < INT , int > 
 < ID , factorial > 
 < RETURN , return > 
 < ID , factorial > 
 < RBLOCK , } > 
 < FUNCTION , function > 
 < INT , int > 
 < ID , FactorialWhile > 
 < LPAREN , ( > 
 < RPAREN , ) > 
 < LBLOCK , { > 
 < VAR , var > 
 < INT , int > 
 < ID , factorial > 
 < VAR , var > 
 < INT , int > 
 < ID , i > 
 < RETURN , return > 
 < ID , factorial > 
 < RBLOCK , } > 
 < FUNCTION , function > 
 < INT , int > 
 < ID , FactorialFor > 
 < LPAREN , ( > 
 < INT , int > 
 < ID , n > 
 < RPAREN , ) > 
 < LBLOCK , { > 
 < VAR , var > 
 < INT , int > 
 < ID , i > 
 < VAR , var > 
 < INT , int > 
 < ID , factorial > 
 < FOR , for > 
 < LPAREN , ( > 
 < ID , i > 
 < ASSIGN , = > 
 < NUMBER , 1 > 
 < END_LINE , ; > 
 < ID , i > 
 < LESSTHAN , <= > 
 < ID , n > 
 < END_LINE , ; > 
 < ID , i > 
 < ASSIGN , = > 
 < ID , i > 
 < PLUS , + > 
 < NUMBER , 1 > 
 < RPAREN , ) > 
 < LBLOCK , { > 
 < ID , factorial > 
 < AOLOGIC , |= > 
 < ID , i > 
 < RBLOCK , } > 
 < RETURN , return > 
 < ID , factorial > 
 < RBLOCK , } > 
 < VAR , var > 
 < INT , int > 
 < ID , For > 
 < COMA , , > 
 < ID , Do > 
 < COMA , , > 
 < ID , While > 
 < FUNCTION , function > 
 < ID , imprime > 
 < LPAREN , ( > 
 < CHARS , chars > 
 < ID , msg > 
 < COMA , , > 
 < INT , int > 
 < ID , f > 
 < RPAREN , ) > 
 < LBLOCK , { > 
 < WRITE , write > 
 < LPAREN , ( > 
 < ID , s > 
 < RPAREN , ) > 
 < WRITE , write > 
 < LPAREN , ( > 
 < ID , msg > 
 < RPAREN , ) > 
 < WRITE , write > 
 < LPAREN , ( > 
 < ID , f > 
 < RPAREN , ) > 
 < WRITE , write > 
 < LPAREN , ( > 
 < STRINGS , "\n" > 
 < RPAREN , ) > 
 < RETURN , return > 
 < RBLOCK , } > 
 < FUNCTION , function > 
 < CHARS , chars > 
 < ID , cadena > 
 < LPAREN , ( > 
 < BOOL , bool > 
 < ID , log > 
 < RPAREN , ) > 
 < LBLOCK , { > 
 < IF , if > 
 < LPAREN , ( > 
 < EXCLA , ! > 
 < ID , log > 
 < RPAREN , ) > 
 < WRITE , write > 
 < LPAREN , ( > 
 < STRINGS , "error" > 
 < RPAREN , ) > 
 < RETURN , return > 
 < ID , log > 
 < RBLOCK , } > 
 < ID , s > 
 < ASSIGN , = > 
 < STRINGS , "El factorial " > 
 < WRITE , write > 
 < LPAREN , ( > 
 < ID , s > 
 < RPAREN , ) > 
 < WRITE , write > 
 < LPAREN , ( > 
 < STRINGS , "\nIntroduce un 'número'." > 
 < RPAREN , ) > 
 < PROMPT , prompt > 
 < LPAREN , ( > 
 < ID , num > 
 < RPAREN , ) > 
 < FUNCTION , function > 
 < BOOL , bool > 
 < ID , esFechaCorrecta > 
 < LPAREN , ( > 
 < INT , int > 
 < ID , d > 
 < COMA , , > 
 < INT , int > 
 < ID , m > 
 < COMA , , > 
 < INT , int > 
 < ID , a > 
 < RPAREN , ) > 
 < LBLOCK , { > 
 < RETURN , return > 
 < ID , m > 
 < GREATERTHAN , >= > 
 < NUMBER , 1 > 
 < YLOGIC , && > 
 < ID , m > 
 < LESSTHAN , <= > 
 < NUMBER , 12 > 
 < YLOGIC , && > 
 < ID , d > 
 < GREATERTHAN , >= > 
 < NUMBER , 1 > 
 < RBLOCK , } > 
 < FUNCTION , function > 
 < ID , imprime2 > 
 < LPAREN , ( > 
 < INT , int > 
 < ID , v > 
 < COMA , , > 
 < INT , int > 
 < ID , w > 
 < RPAREN , ) > 
 < LBLOCK , { > 
 < WRITE , write > 
 < LPAREN , ( > 
 < ID , v > 
 < PLUS , + > 
 < ID , w > 
 < RPAREN , ) > 
 < RBLOCK , } > 
 < FUNCTION , function > 
 < ID , potencia > 
 < LPAREN , ( > 
 < INT , int > 
 < ID , z > 
 < COMA , , > 
 < INT , int > 
 < ID , dim > 
 < RPAREN , ) > 
 < LBLOCK , { > 
 < VAR , var > 
 < INT , int > 
 < ID , s > 
 < FOR , for > 
 < LPAREN , ( > 
 < ID , s > 
 < ASSIGN , = > 
 < NUMBER , 0 > 
 < END_LINE , ; > 
 < ID , s > 
 < LESS , < > 
 < ID , dim > 
 < END_LINE , ; > 
 < ID , s > 
 < ASSIGN , = > 
 < ID , s > 
 < PLUS , + > 
 < NUMBER , 1 > 
 < RPAREN , ) > 
 < LBLOCK , { > 
 < ID , z > 
 < AOLOGIC , |= > 
 < ID , z > 
 < RBLOCK , } > 
 < RBLOCK , } > 
 < FUNCTION , function > 
 < ID , demo > 
 < LPAREN , ( > 
 < RPAREN , ) > 
 < LBLOCK , { > 
 < VAR , var > 
 < INT , int > 
 < ID , i > 
 < VAR , var > 
 < INT , int > 
 < ID , v0 > 
 < VAR , var > 
 < CHARS , chars > 
 < ID , s > 
 < VAR , var > 
 < INT , int > 
 < ID , v > 
 < VAR , var > 
 < INT , int > 
 < ID , v1 > 
 < VAR , var > 
 < INT , int > 
 < ID , v2 > 
 < VAR , var > 
 < INT , int > 
 < ID , v3 > 
 < VAR , var > 
 < INT , int > 
 < ID , zv > 
 < WRITE , write > 
 < LPAREN , ( > 
 < STRINGS , "Escriba tres números: " > 
 < RPAREN , ) > 
 < PROMPT , prompt > 
 < LPAREN , ( > 
 < ID , v1 > 
 < RPAREN , ) > 
 < PROMPT , prompt > 
 < LPAREN , ( > 
 < ID , v2 > 
 < RPAREN , ) > 
 < PROMPT , prompt > 
 < LPAREN , ( > 
 < ID , v3 > 
 < RPAREN , ) > 
 < WRITE , write > 
 < LPAREN , ( > 
 < STRINGS , "Escriba su nombre: " > 
 < RPAREN , ) > 
 < PROMPT , prompt > 
 < LPAREN , ( > 
 < ID , s > 
 < RPAREN , ) > 
 < WRITE , write > 
 < LPAREN , ( > 
 < ID , s > 
 < RPAREN , ) > 
 < ID , s > 
 < ASSIGN , = > 
 < STRINGS , "El primer valor era " > 
 < IF , if > 
 < LPAREN , ( > 
 < ID , v1 > 
 < NOASSIG , != > 
 < NUMBER , 0 > 
 < RPAREN , ) > 
 < WRITE , write > 
 < LPAREN , ( > 
 < ID , v1 > 
 < RPAREN , ) > 
 < FOR , for > 
 < LPAREN , ( > 
 < ID , i > 
 < ASSIGN , = > 
 < NUMBER , 1 > 
 < END_LINE , ; > 
 < ID , i > 
 < LESSTHAN , <= > 
 < NUMBER , 10 > 
 < END_LINE , ; > 
 < ID , i > 
 < ASSIGN , = > 
 < ID , i > 
 < PLUS , + > 
 < NUMBER , 1 > 
 < RPAREN , ) > 
 < LBLOCK , { > 
 < ID , zv > 
 < AOLOGIC , |= > 
 < ID , i > 
 < RBLOCK , } > 
 < WRITE , write > 
 < LPAREN , ( > 
 < ID , num > 
 < RPAREN , ) > 
 < WRITE , write > 
 < LPAREN , ( > 
 < ID , s > 
 < RPAREN , ) > 
 < RBLOCK , } > 
 < ID , demo > 
 < LPAREN , ( > 
 < RPAREN , ) > 
